<script lang="ts">
    import Input from "$lib/components/ui/input/input.svelte";
    import { Type, Hash, GitBranch } from "lucide-svelte";
    import { flip } from "svelte/animate";
    import { dndzone } from "svelte-dnd-action";

    export let item: any;
    export let onIfDndConsider:
        | ((e: CustomEvent, itemId: number) => void)
        | null = null;
    export let onIfDndFinalize:
        | ((e: CustomEvent, itemId: number) => void)
        | null = null;

    const blockConfig = {
        say: {
            color: "purple-500",
            label: "Say",
            fields: [
                {
                    type: "text",
                    bind: "text",
                    placeholder: "message",
                    icon: Type,
                },
                {
                    type: "number",
                    bind: "duration",
                    label: "for",
                    placeholder: "seconds",
                    icon: Hash,
                },
            ],
        },
        if: {
            color: "blue-500",
            label: "If",
            fields: [
                {
                    type: "text",
                    bind: "condition",
                    placeholder: "condition",
                    icon: GitBranch,
                },
            ],
            end: "then",
        },
    };

    $: config = blockConfig[item.type];
</script>

{#if config}
    <div
        data-id={item.id}
        class="spacemono bg-gray-800 m-2 p-2 w-fit rounded-r border-l-4 relative overflow-visible cursor-grab {config.color ===
        'purple-500'
            ? 'border-l-purple-500'
            : 'border-l-blue-500'}"
    >
        <p class="text-sm text-gray-300">{config.label}</p>
        <div class="flex items-center mt-3 gap-2">
            {#each config.fields as field}
                {#if field.label}<p>{field.label}</p>{/if}
                <Input
                    type={field.type}
                    class="rounded-full h-8 flex-1"
                    placeholder={field.placeholder}
                    bind:value={item[field.bind]}
                />
                <svelte:component
                    this={field.icon}
                    class="w-8 h-8 p-2 rounded-full outline"
                />
            {/each}

            {#if config.end}<p>{config.end}</p>{/if}
        </div>

        {#if item.type === "if" && onIfDndConsider && onIfDndFinalize}
            <div
                use:dndzone={{
                    items: item.children,
                    flipDurationMs: 300,
                    type: "codeblock",
                }}
                on:consider={(e) => onIfDndConsider(e, item.id)}
                on:finalize={(e) => onIfDndFinalize(e, item.id)}
                class="min-h-32 w-full bg-gray-950 rounded m-2 p-2 z-10"
            >
                {#each item.children as child (child.id)}
                    <div animate:flip={{ duration: 300 }}>
                        <svelte:self
                            item={child}
                            {onIfDndConsider}
                            {onIfDndFinalize}
                        />
                    </div>
                {/each}
                {#if item.children.length === 0}{/if}
            </div>
        {/if}
    </div>
{:else}
    <div
        class="spacemono bg-gray-700 m-1 p-2 rounded-l text-sm text-gray-300 cursor-grab"
    >
        {item.type} block
    </div>
{/if}
